name: Criar DMG do macOS Installer

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: macos-latest

    steps:
      # --- CACHE E DOWNLOAD ---
      - name: Tentar restaurar cache
        uses: actions/cache@v3
        id: cache-pkg
        with:
          path: /tmp/InstallAssistant.pkg
          key: installassistant-${{ hashFiles('.github/workflows/lockfile.txt') }}

      - name: Baixar InstallAssistant.pkg
        if: steps.cache-pkg.outputs.cache-hit != 'true'
        run: |
          curl -L -o /tmp/InstallAssistant.pkg \
            "https://swcdn.apple.com/content/downloads/51/28/082-44432-A_4NJSZXK8G5/v10fo5dlwd50fja3qbnhj7z9tp1dx41vq2/InstallAssistant.pkg" || {
              [ -f /tmp/InstallAssistant.pkg ] && exit 0 || exit 1
          }
        timeout-minutes: 30

      - name: Salvar no cache
        if: steps.cache-pkg.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: /tmp/InstallAssistant.pkg
          key: ${{ steps.cache-pkg.outputs.cache-primary-key }}

      # --- INSTALAÇÃO ---
      - name: Instalar InstallAssistant.pkg
        run: |
          sudo installer -pkg /tmp/InstallAssistant.pkg -target / -verbose

      # --- LOCALIZAR APP ---
      - name: Encontrar app de instalação
        id: find-app
        run: |
          APP_PATH=$(find /Applications -maxdepth 1 -name "Install macOS*.app" -print -quit)
          [ -z "$APP_PATH" ] && { echo "::error::App não encontrado"; exit 1; }
          echo "APP_PATH=${APP_PATH}" >> $GITHUB_ENV
          echo "App encontrado: ${APP_PATH}"

      # --- MONTAGEM DO DMG ---
      - name: Montar SharedSupport.dmg
        run: |
          # Forçar desmontagem se existir
          hdiutil eject "/Volumes/SharedSupport" -force 2>/dev/null || true

          # Montagem com tratamento explícito
          hdiutil attach \
            "$APP_PATH/Contents/SharedSupport/SharedSupport.dmg" \
            -mountpoint "/Volumes/SharedSupport" \
            -nobrowse \
            -noverify \
            -noautoopen \
            -owners on

          # Verificação crítica
          if [ ! -d "/Volumes/SharedSupport" ]; then
            echo "::error::Falha na montagem"
            diskutil list
            exit 1
          fi

      # --- CRIAÇÃO DO DMG ---
      - name: Criar DMG final
        run: |
          mkdir -p "$GITHUB_WORKSPACE/output"
          
          hdiutil create \
            -volname "Install macOS" \
            -srcfolder "/Volumes/SharedSupport" \
            -format UDZO \
            -ov \
            -scrub \
            -fs HFS+ \
            -megabytes 16000 \
            "$GITHUB_WORKSPACE/output/Install_macOS.dmg"

          [ -f "$GITHUB_WORKSPACE/output/Install_macOS.dmg" ] || {
            echo "::error::Falha ao criar DMG"
            exit 1
          }

      # --- LIMPEZA ---
      - name: Ejetar volume
        run: |
          hdiutil eject "/Volumes/SharedSupport" -force || true

      # --- PUBLICAÇÃO ---
      - name: Upload do artefato
        uses: actions/upload-artifact@v4
        with:
          name: Install_macOS
          path: output/Install_macOS.dmg

      - name: Criar release
        uses: softprops/action-gh-release@v2
        with:
          files: output/Install_macOS.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}